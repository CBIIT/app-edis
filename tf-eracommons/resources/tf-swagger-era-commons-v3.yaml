openapi: 3.0.0
info:
  description: Enterprise Data & Integration Services Web Services - **eRA Commons User Service**
  version: "0.3.2"
  title: eRA Commons User API
  # put the contact info for your development or API team
  contact:
    email: NCICBIITBizAppsSupportLowTier@mail.nih.gov
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true
  params:
    validateRequestBody: true
    validateRequestParameters: true
  body:
    validateRequestBody: true
    validateRequestParameters: false

# tags are used for organizing operations
tags:
  - name: clients
    description: Operations available to clients - service to service

paths:
  /eracommonsapi/v1/users:
    get:
      tags:
        - clients
      summary: Get external users records within date range
      operationId: getUsers
      description: |
        Get external eRA Commons user records that have changed within given date range
        For example - https://localhost/eracommonsapi/v1/users?from=2021-05-01&to=2021-05-01
        (retrieve user records for the given date interval)
      x-amazon-apigateway-request-validator: params
      parameters:
        - name: from
          in: query
          description: start date range
          required: false
          schema:
            type: string
            format: date
            example: '2016-05-15'
        - name: to
          in: query
          description: end date range
          required: false
          schema:
            type: string
            format: date
            example: '2016-05-16'
      responses:
        '200':
          description: JSON formatted records of the user information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: bad input parameter
      x-amazon-apigateway-integration:
        uri: ${lambda_invoke_arn}
        httpMethod: POST
        timeoutInMillis: 10000
        type: "aws_proxy"
        cacheKeyParameters:
          - method.request.querystring.from
          - method.request.querystring.to
      security:
        - request-authorizer: []

  /eracommonsapi/v1/user/{userID}:
    get:
      tags:
        - clients
      summary: External User Information
      operationId: getUserByUserId
      description:
        Get external eRA Commons user record by USER_ID
      parameters:
        - name: userID
          in: path
          required: true
          description: User ID
          schema:
            type: string
      responses:
        '200':
          description: JSON formatted record of the user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: bad input parameter
      x-amazon-apigateway-integration:
        uri: ${lambda_invoke_arn}
        httpMethod: POST
        timeoutInMillis: 10000
        type: "aws_proxy"
        cacheKeyParameters:
          - method.request.path.userID
      security:
        - request-authorizer: []

  /eracommonsapi/v1/users/date/{date}:
    get:
      tags:
        - clients
      summary: Get External User Records for a given date
      operationId: getUserByDate
      description:
        Get external eRA Commons user records by given date
      parameters:
        - name: date
          in: path
          required: true
          description: Date in format YYYY-MM-DD
          schema:
            type: string
      responses:
        '200':
          description: JSON formatted records of the user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          description: bad input parameter
      x-amazon-apigateway-integration:
        uri: ${lambda_invoke_arn}
        httpMethod: POST
        timeoutInMillis: 10000
        type: "aws_proxy"
        cacheKeyParameters:
          - method.request.path.date
      security:
        - request-authorizer: []

  /eracommonsapi/v2/user/{userID}:
    get:
      tags:
        - clients
      summary: Get External User Record for given USER ID straight from Dynamo DB
      operationId: getUserByUserIdFromDdb
      description:
        Get external eRA Commons user record by USER_ID straight from Dynamo DB
      parameters:
        - name: userID
          in: path
          required: true
          description: User ID
          schema:
            type: string
      responses:
        '200':
          description: JSON formatted record of the user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: bad input parameter
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: ${ddb_action_get_item}
        credentials: ${ddb_role_arn}
        passthroughBehavior: when_no_templates
        timeoutInMillis: 10000
        cacheKeyParameters:
          - method.request.path.userID
        requestTemplates:
          application/json: |-
            {
                "TableName": "${users_table_name}",
                "Key": {
                    "USER_ID": {
                        "S": "$input.params('userID')"
                    }
                },
                "ConsistentRead": true
            }
        responses:
          2\d{2}:
            statusCode: 200
            responseTemplates:
              application/json: |-
                #set ($elem = $input.path('$.Item'))
                #if($elem == "")
                  {
                  }
                #else
                  {
                    "USER_ID": "$elem.USER_ID.S",
                    "PERSON_ID": $elem.PERSON_ID.N,
                    "FIRST_NAME": "$elem.FIRST_NAME.S",
                    "LAST_NAME": "$elem.LAST_NAME.S",
                    "NAME_PREFIX": "$elem.NAME_PREFIX.S",
                    "MI_NAME": "$elem.MI_NAME.S",
                    "NAME_SUFFIX": "$elem.NAME_SUFFIX.S",
                    "EMAIL": "$elem.EMAIL.S",
                    "ORG_NAME": "$elem.ORG_NAME.S",
                    "ORG_ID": $elem.ORG_ID.N,
                    "ORG_ADDRESS_1": "$elem.LINE_1_ADDR.S",
                    "ORG_ADDRESS_2": "$elem.LINE_2_ADDR.S",
                    "ORG_ADDRESS_3": "$elem.LINE_3_ADDR.S",
                    "ORG_ADDRESS_4": "$elem.LINE_4_ADDR.S",
                    "ORG_ADDRESS_5": "$elem.LINE_5_ADDR.S",
                    "CITY": "$elem.CITY.S",
                    "STATE": "$elem.STATE.S",
                    "PHONE_NUMBER": "$elem.PHONE_NUMBER.S",
                    "ORG_EMAIL": "$elem.ORG_EMAIL.S",
                    "ACCOUNT_CREATED_DATE": "$elem.ACCOUNT_CREATED_DATE.S",
                    "ACCOUNT_UPDATED_DATE": "$elem.ACCOUNT_UPDATED_DATE.S",
                    "STATUS_CODE": $elem.STATUS_CODE.N,
                    "STATUS_DESC": "$elem.STATUS_DESCRIP.S",
                    "LAST_UPDATED_DAY": "$elem.LAST_UPDATED_DAY.S",
                    "LOGINGOV_USER_ID": "$elem.LOGINGOV_USER_ID.S",
                    "ALIAS_DESCRIP": "$elem.ALIAS_DESCRIP.S"
                  }
                #end
      security:
        - request-authorizer: []

  /eracommonsapi/v2/users:
    get:
      tags:
        - clients
      summary: Get External User Records for date range straight from Dynamo DB
      operationId: getUsersFromDdb
      description: |
        Get external eRA Commons user records *for date range* straight from Dynamo DB  
        You have to check the result for existence of LastEvaluatedKey property and  
        loop your request passing it's value (```?lastEvaluatedKey=xxx```) as query parameter  
        until the final result does not contain LastEvaluatedKey property
      parameters:
        - name: from
          in: query
          description: start date range
          required: false
          schema:
            type: string
            format: date
            example: '2016-05-15'
        - name: to
          in: query
          description: end date range
          required: false
          schema:
            type: string
            format: date
            example: '2016-05-15'
        - name: lastEvaluatedKey
          in: query
          description: Last Evaluated Key from previous request
          required: false
          schema:
            type: string
            example: 'lastuserid'
      responses:
        '200':
          description: JSON formatted records of the users information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersChunk'
        '400':
          description: bad input parameter
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: ${ddb_action_scan}
        credentials: ${ddb_role_arn}
        passthroughBehavior: when_no_templates
        timeoutInMillis: 10000
        cacheKeyParameters:
          - method.request.querystring.from
          - method.request.querystring.to
          - method.request.querystring.lastEvaluatedKey
        requestTemplates:
          application/json: |-
            #set($from = $input.params('from'))
            #set($to = $input.params('to'))
            #set($lastEvaluatedKey = $input.params('lastEvaluatedKey'))
            {
              "TableName": "${users_table_name}"
            #if($lastEvaluatedKey != "")
              , "ExclusiveStartKey": { "USER_ID": { "S": "$lastEvaluatedKey" } }
            #end
            #if(($from != "") && ($to != ""))
              , "FilterExpression": "LAST_UPDATED_DAY BETWEEN :start AND :end",
              "ExpressionAttributeValues": {
                  ":start": { "S": "$from"},
                  ":end": { "S": "$to"}
              }
            #elseif(($from != "") && ($to == ""))
              , "FilterExpression": "LAST_UPDATED_DAY >= :start",
              "ExpressionAttributeValues": {
                  ":start": { "S": "$from"}
              }
            #end
            }
        responses:
          2\d{2}:
            statusCode: 200
            responseTemplates:
              application/json: |-
                #set ($inputRoot = $input.path('$'))
                #set ($lastEvaluatedKey = $inputRoot.LastEvaluatedKey.USER_ID.S)
                {
                  "count": $inputRoot.Count,
                #if($lastEvaluatedKey != "")
                  "lastEvaluatedKey": "$lastEvaluatedKey",
                #end
                  "items": [
                #foreach($elem in $inputRoot.Items)
                    {
                      "USER_ID": "$elem.USER_ID.S",
                      "PERSON_ID": $elem.PERSON_ID.N,
                      "FIRST_NAME": "$elem.FIRST_NAME.S",
                      "LAST_NAME": "$elem.LAST_NAME.S",
                      "NAME_PREFIX": "$elem.NAME_PREFIX.S",
                      "MI_NAME": "$elem.MI_NAME.S",
                      "NAME_SUFFIX": "$elem.NAME_SUFFIX.S",
                      "EMAIL": "$elem.EMAIL.S",
                      "ORG_NAME": "$elem.ORG_NAME.S",
                      "ORG_ID": $elem.ORG_ID.N,
                      "ORG_ADDRESS_1": "$elem.LINE_1_ADDR.S",
                      "ORG_ADDRESS_2": "$elem.LINE_2_ADDR.S",
                      "ORG_ADDRESS_3": "$elem.LINE_3_ADDR.S",
                      "ORG_ADDRESS_4": "$elem.LINE_4_ADDR.S",
                      "ORG_ADDRESS_5": "$elem.LINE_5_ADDR.S",
                      "CITY": "$elem.CITY.S",
                      "STATE": "$elem.STATE.S",
                      "PHONE_NUMBER": "$elem.PHONE_NUMBER.S",
                      "ORG_EMAIL": "$elem.ORG_EMAIL.S",
                      "ACCOUNT_CREATED_DATE": "$elem.ACCOUNT_CREATED_DATE.S",
                      "ACCOUNT_UPDATED_DATE": "$elem.ACCOUNT_UPDATED_DATE.S",
                      "STATUS_CODE": $elem.STATUS_CODE.N,
                      "STATUS_DESC": "$elem.STATUS_DESCRIP.S",
                      "LAST_UPDATED_DAY": "$elem.LAST_UPDATED_DAY.S",
                      "LOGINGOV_USER_ID": "$elem.LOGINGOV_USER_ID.S",
                      "ALIAS_DESCRIP": "$elem.ALIAS_DESCRIP.S"
                    }#if($foreach.hasNext),#end

                #end
                  ]
                }
      security:
        - request-authorizer: []


  /eracommonsapi/v2/users/date/{date}:
    get:
      tags:
        - clients
      summary: Get External User Records for a given date straight from Dynamo DB
      operationId: getUserByDateFromDdb
      description: |
        Get external eRA Commons user records *for a given date* straight from Dynamo DB  
        You have to check the result for existence of LastEvaluatedKey property and  
        loop your request passing it's value (```?lastEvaluatedKey=xxx```) as query parameter  
        until the final result does not contain LastEvaluatedKey property
      parameters:
        - name: date
          in: path
          required: true
          description: Date in format YYYY-MM-DD
          schema:
            type: string
        - name: lastEvaluatedKey
          in: query
          description: optional Last Evaluated Key from previous request's result
          required: false
          schema:
            type: string
            example: 'lastuserid'
      responses:
        '200':
          description: JSON formatted records of the user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersChunk'
        '400':
          description: bad input parameter
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: ${ddb_action_query}
        credentials: ${ddb_role_arn}
        passthroughBehavior: when_no_templates
        timeoutInMillis: 10000
        cacheKeyParameters:
          - method.request.path.date
          - method.request.querystring.lastEvaluatedKey
        requestTemplates:
          application/json: |-
            #set($lastEvaluatedKey = $input.params('lastEvaluatedKey'))
            {
              "TableName": "${users_table_name}",
              "IndexName": "dateIndex",
              "KeyConditionExpression": "LAST_UPDATED_DAY = :date",
              "ExpressionAttributeValues": {
                ":date": { "S": "$input.params('date')" }
              }
            #if($lastEvaluatedKey != "")
              , "ExclusiveStartKey": { "USER_ID": { "S": "$lastEvaluatedKey" } }
            #end
            }
        responses:
          2\d{2}:
            statusCode: 200
            responseTemplates:
              application/json: |-
                #set ($inputRoot = $input.path('$'))
                #set ($lastEvaluatedKey = $inputRoot.LastEvaluatedKey.USER_ID.S)
                {
                  "count": $inputRoot.Count,
                #if($lastEvaluatedKey != "")
                  "lastEvaluatedKey": "$lastEvaluatedKey",
                #end
                  "items": [
                #foreach($elem in $inputRoot.Items)
                    {
                      "USER_ID": "$elem.USER_ID.S",
                      "PERSON_ID": $elem.PERSON_ID.N,
                      "FIRST_NAME": "$elem.FIRST_NAME.S",
                      "LAST_NAME": "$elem.LAST_NAME.S",
                      "NAME_PREFIX": "$elem.NAME_PREFIX.S",
                      "MI_NAME": "$elem.MI_NAME.S",
                      "NAME_SUFFIX": "$elem.NAME_SUFFIX.S",
                      "EMAIL": "$elem.EMAIL.S",
                      "ORG_NAME": "$elem.ORG_NAME.S",
                      "ORG_ID": $elem.ORG_ID.N,
                      "ORG_ADDRESS_1": "$elem.LINE_1_ADDR.S",
                      "ORG_ADDRESS_2": "$elem.LINE_2_ADDR.S",
                      "ORG_ADDRESS_3": "$elem.LINE_3_ADDR.S",
                      "ORG_ADDRESS_4": "$elem.LINE_4_ADDR.S",
                      "ORG_ADDRESS_5": "$elem.LINE_5_ADDR.S",
                      "CITY": "$elem.CITY.S",
                      "STATE": "$elem.STATE.S",
                      "PHONE_NUMBER": "$elem.PHONE_NUMBER.S",
                      "ORG_EMAIL": "$elem.ORG_EMAIL.S",
                      "ACCOUNT_CREATED_DATE": "$elem.ACCOUNT_CREATED_DATE.S",
                      "ACCOUNT_UPDATED_DATE": "$elem.ACCOUNT_UPDATED_DATE.S",
                      "STATUS_CODE": $elem.STATUS_CODE.N,
                      "STATUS_DESC": "$elem.STATUS_DESCRIP.S",
                      "LAST_UPDATED_DAY": "$elem.LAST_UPDATED_DAY.S",
                      "LOGINGOV_USER_ID": "$elem.LOGINGOV_USER_ID.S",
                      "ALIAS_DESCRIP": "$elem.ALIAS_DESCRIP.S"
                    }#if($foreach.hasNext),#end

                #end
                  ]
                }
      security:
        - request-authorizer: []

  /eracommonsapi/v2/logingovuser/{logingovUserId}:
    get:
      tags:
        - clients
      summary: Get External User Record for given LOGIN.GOV USER ID straight from Dynamo DB
      operationId: getUserByLogingovUserIdFromDdb
      description: Get external eRA Commons user record by LOGIN.GOV USER_ID straight from Dynamo DB
      parameters:
        - name: logingovUserId
          in: path
          required: true
          description: LOGIN.GOV User ID
          schema:
            type: string
      responses:
        '200':
          description: JSON formatted record of the user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: bad input parameter
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: ${ddb_action_query}
        credentials: ${ddb_role_arn}
        passthroughBehavior: when_no_templates
        timeoutInMillis: 10000
        cacheKeyParameters:
          - method.request.path.logingovUserId
        requestTemplates:
          application/json: |-
            {
              "TableName": "${users_table_name}",
              "IndexName": "logingovIndex",
              "KeyConditionExpression": "LOGINGOV_USER_ID = :logingovUserId",
              "ExpressionAttributeValues": {
                ":logingovUserId": { "S": "$input.params('logingovUserId')" }
              }
            }
        responses:
          2\d{2}:
            statusCode: 200
            responseTemplates:
              application/json: |-
                #set ($inputRoot = $input.path('$'))
                {
                #if($inputRoot.Count > 0)
                  "USER_ID": "$inputRoot.Items[0].USER_ID.S",
                  "PERSON_ID": $inputRoot.Items[0].PERSON_ID.N,
                  "FIRST_NAME": "$inputRoot.Items[0].FIRST_NAME.S",
                  "LAST_NAME": "$inputRoot.Items[0].LAST_NAME.S",
                  "NAME_PREFIX": "$inputRoot.Items[0].NAME_PREFIX.S",
                  "MI_NAME": "$inputRoot.Items[0].MI_NAME.S",
                  "NAME_SUFFIX": "$inputRoot.Items[0].NAME_SUFFIX.S",
                  "EMAIL": "$inputRoot.Items[0].EMAIL.S",
                  "ORG_NAME": "$inputRoot.Items[0].ORG_NAME.S",
                  "ORG_ID": $inputRoot.Items[0].ORG_ID.N,
                  "ORG_ADDRESS_1": "$inputRoot.Items[0].LINE_1_ADDR.S",
                  "ORG_ADDRESS_2": "$inputRoot.Items[0].LINE_2_ADDR.S",
                  "ORG_ADDRESS_3": "$inputRoot.Items[0].LINE_3_ADDR.S",
                  "ORG_ADDRESS_4": "$inputRoot.Items[0].LINE_4_ADDR.S",
                  "ORG_ADDRESS_5": "$inputRoot.Items[0].LINE_5_ADDR.S",
                  "CITY": "$inputRoot.Items[0].CITY.S",
                  "STATE": "$inputRoot.Items[0].STATE.S",
                  "PHONE_NUMBER": "$inputRoot.Items[0].PHONE_NUMBER.S",
                  "ORG_EMAIL": "$inputRoot.Items[0].ORG_EMAIL.S",
                  "ACCOUNT_CREATED_DATE": "$inputRoot.Items[0].ACCOUNT_CREATED_DATE.S",
                  "ACCOUNT_UPDATED_DATE": "$inputRoot.Items[0].ACCOUNT_UPDATED_DATE.S",
                  "STATUS_CODE": $inputRoot.Items[0].STATUS_CODE.N,
                  "STATUS_DESC": "$inputRoot.Items[0].STATUS_DESCRIP.S",
                  "LAST_UPDATED_DAY": "$inputRoot.Items[0].LAST_UPDATED_DAY.S",
                  "LOGINGOV_USER_ID": "$inputRoot.Items[0].LOGINGOV_USER_ID.S",
                  "ALIAS_DESCRIP": "$inputRoot.Items[0].ALIAS_DESCRIP.S"
                #end
                }
      security:
        - request-authorizer: []

components:
  schemas:
    Users:
      type: object
      properties:
        count:
            type: integer
        error:
          type: string
          description: Error message if not empty - rest of the fields are zeros
        items:
            type: array
            items:
              $ref: '#/components/schemas/User'

    UsersChunk:
      type: object
      properties:
        count:
            type: integer
        error:
          type: string
          description: Error message if not empty - rest of the fields are zeros
        lastEvaluatedKey:
          type: string
          description: If present, the result is incomplete, pass this value as "lastEvaluatedKey" query parameter to get the next chunk of results
        items:
            type: array
            items:
              $ref: '#/components/schemas/User'

    User:
      type: object
      required:
        - USER_ID
        - EMAIL
        - STATUS_CODE
        - STATUS_DESC
        - ACCOUNT_CREATED_DATE
      properties:
        USER_ID:
          type: string
          format: string
          example: ABCDF9092
        EMAIL:
          type: string
          example: abcdf2@company.com
        NAME_PREFFIX:
          type: string
          example: Dr
        FIRST_NAME:
          type: string
          example: First
        MI_NAME:
          type: string
          example: M
        LAST_NAME:
          type: string
          example: Last
        NAME_SUFFIX:
          type: string
          example: Jr
        STATUS_CODE:
          type: integer
          example: 1
        STATUS_DESC:
          type: string
          example: Active
        ACCOUNT_CREATED_DATE:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        ACCOUNT_UPDATED_DATE:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        ORG_ID:
          type: integer
          example: 12345
        ORG_NAME:
          type: string
          example: UNIVERSITY OF XXXX
        ORG_ADDRESS_1:
          type: string
          example: UNIVERSITY OF XXXXX
        ORG_ADDRESS_2:
          type: string
          example: RESEARCH
        ORG_ADDRESS_3:
          type: string
          example: 1 Some Avenue
        ORG_ADDRESS_4:
          type: string
          example: City, State 9876, USA
        ORG_ADDRESS_5:
          type: string
          example: ' '
        CITY:
          type: string
          example: CITY
        STATE:
          type: string
          example: ' '
        PHONE_NUMBER:
          type: string
          example: 1234567890
        ORG_EMAIL:
          type: string
          example: First.Last@company.com
        LOGINGOV_USER_ID:
          type: string
          example: 12345-67890-12234-45678
        ALIAS_DESCRIP:
          type: string
          example: abcd@company.gov

  securitySchemes:
    request-authorizer:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: custom
      x-amazon-apigateway-authorizer:
        type: token
        authorizerUri: ${auth_lambda_invoke_arn}
        authorizerResultTtlInSeconds: 300
