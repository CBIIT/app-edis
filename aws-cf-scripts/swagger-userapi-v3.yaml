openapi: 3.0.0
info:
  description: Enterprise Data & Integration Services Web Services - **eRA Commons User Service**
  version: "0.3.0"
  title: eRA Commons User API
  # put the contact info for your development or API team
  contact:
    email: NCICBIITBizAppsSupportLowTier@mail.nih.gov
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true
  params:
    validateRequestBody: true
    validateRequestParameters: true
  body:
    validateRequestBody: true
    validateRequestParameters: false

# tags are used for organizing operations
tags:
  - name: clients
    description: Operations available to clients - service to service

paths:
  /eracommonsapi/v1/users:
    get:
      tags:
        - clients
      summary: Get external users records within date range
      operationId: getUsers
      description: |
        Get external eRA Commons user records that have changed within given date range

        For example - https://localhost/eracommonsapi/v1/users?from=2021-05-01&to=2021-05-01

        (retrieve user records for the given date interval)
      x-amazon-apigateway-request-validator: params
      parameters:
        - name: from
          in: query
          description: start date range
          required: false
          schema:
            type: string
            format: date
            example: '2016-05-15'
        - name: to
          in: query
          description: end date range
          required: false
          schema:
            type: string
            format: date
            example: '2016-05-16'
      responses:
        '200':
          description: JSON formatted records of the user information
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: bad input parameter
      x-amazon-apigateway-integration:
        uri:
            Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EraCommonsUserApiLambdaFunction.Arn}/invocations
        httpMethod: POST
        timeoutInMillis: 10000
        type: "aws_proxy"

  /eracommonsapi/v1/user/{userID}:
    get:
      tags:
        - clients
      summary: External User Information
      operationId: getUserByUserId
      description: |
        Get external eRA Commons user record by USER_ID
      parameters:
        - name: userID
          in: path
          required: true
          description: User ID
          schema:
            type: string
      responses:
        '200':
          description: JSON formatted record of the user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: bad input parameter
      x-amazon-apigateway-integration:
        uri:
            Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EraCommonsUserApiLambdaFunction.Arn}/invocations
        httpMethod: POST
        timeoutInMillis: 10000
        type: "aws_proxy"
  /eracommonsapi/v1/users/date/{date}:
    get:
      tags:
        - clients
      summary: Get External User Records for a given date
      operationId: getUserByDate
      description: |
        Get external eRA Commons user records by given date
      parameters:
        - name: date
          in: path
          required: true
          description: Date in format YYYY-MM-DD
          schema:
            type: string
      responses:
        '200':
          description: JSON formatted records of the user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          description: bad input parameter
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EraCommonsUserApiLambdaFunction.Arn}/invocations
        httpMethod: POST
        timeoutInMillis: 10000
        type: "aws_proxy"

  /eracommonsapi/v2/user/{userID}:
    get:
      tags:
        - clients
      summary: Get External User Record for given USER ID straight from Dynamo DB
      operationId: getUserByUserIdFromDdb
      description: |
        Get external eRA Commons user record by USER_ID straight from Dynamo DB
      parameters:
        - name: userID
          in: path
          required: true
          description: User ID
          schema:
            type: string
      responses:
        '200':
          description: JSON formatted record of the user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: bad input parameter
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:dynamodb:action/GetItem
        credentials:
          Fn::Sub: ${DynamoDbRoleArn}
        passthroughBehavior: when_no_templates
        timeoutInMillis: 10000
        requestTemplates:
          application/json:
            Fn::Sub: |-
              {
                  "TableName": "${UsersTableName}",
                  "Key": {
                      "USER_ID": {
                          "S": "$input.params('userID')"
                      }
                  },
                  "ConsistentRead": true
              }
        responses:
          2\d{2}:
            statusCode: 200
            responseTemplates:
              application/json:
                Fn::Sub: |-
                  #set ($elem = $input.path('$.Item'))
                  #if($elem == "")
                    {
                    }
                  #else
                    {
                      "USER_ID": "$elem.USER_ID.S",
                      "PERSON_ID": $elem.PERSON_ID.N,
                      "FIRST_NAME": "$elem.FIRST_NAME.S",
                      "LAST_NAME": "$elem.LAST_NAME.S",
                      "NAME_PREFIX": "$elem.NAME_PREFIX.S",
                      "MI_NAME": "$elem.MI_NAME.S",
                      "NAME_SUFFIX": "$elem.NAME_SUFFIX.S",
                      "EMAIL": "$elem.EMAIL.S",
                      "ORG_NAME": "$elem.ORG_NAME.S",
                      "ACCOUNT_CREATED_DATE": "$elem.ACCOUNT_CREATED_DATE.S",
                      "ACCOUNT_UPDATED_DATE": "$elem.ACCOUNT_UPDATED_DATE.S",
                      "STATUS_CODE": $elem.STATUS_CODE.N,
                      "STATUS_DESC": "$elem.STATUS_DESCRIP.S",
                      "LAST_UPDATED_DAY": "$elem.LAST_UPDATED_DAY.S",
                    }
                  #end

  /eracommonsapi/v2/users/date/{date}:
    get:
      tags:
        - clients
      summary: Get External User Records for a given date straight from Dynamo DB
      operationId: getUserByDateFromDdb
      description: |
        Get external eRA Commons user records by given date straight from Dynamo DB
      parameters:
        - name: date
          in: path
          required: true
          description: Date in format YYYY-MM-DD
          schema:
            type: string
      responses:
        '200':
          description: JSON formatted records of the user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          description: bad input parameter
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query
        credentials:
          Fn::Sub: ${DynamoDbRoleArn}
        passthroughBehavior: when_no_templates
        timeoutInMillis: 10000
        requestTemplates:
          application/json:
            Fn::Sub: |-
              {
                "TableName": "${UsersTableName}",
                "IndexName": "dateIndex",
                "KeyConditionExpression": "LAST_UPDATED_DAY = :date",
                "ExpressionAttributeValues": {
                  ":date": { "S": "$input.params('date')" }
                }
              }
        responses:
          2\d{2}:
            statusCode: 200
            responseTemplates:
              application/json:
                Fn::Sub: |-
                  #set ($inputRoot = $input.path('$'))
                  {
                    "count": $inputRoot.Count,
                    "items": [
                  #foreach($elem in $inputRoot.Items)
                      {
                        "USER_ID": "$elem.USER_ID.S",
                        "PERSON_ID": $elem.PERSON_ID.N,
                        "FIRST_NAME": "$elem.FIRST_NAME.S",
                        "LAST_NAME": "$elem.LAST_NAME.S",
                        "NAME_PREFIX": "$elem.NAME_PREFIX.S",
                        "MI_NAME": "$elem.MI_NAME.S",
                        "NAME_SUFFIX": "$elem.NAME_SUFFIX.S",
                        "EMAIL": "$elem.EMAIL.S",
                        "ORG_NAME": "$elem.ORG_NAME.S",
                        "ACCOUNT_CREATED_DATE": "$elem.ACCOUNT_CREATED_DATE.S",
                        "ACCOUNT_UPDATED_DATE": "$elem.ACCOUNT_UPDATED_DATE.S",
                        "STATUS_CODE": $elem.STATUS_CODE.N,
                        "STATUS_DESC": "$elem.STATUS_DESCRIP.S",
                        "LAST_UPDATED_DAY": "$elem.LAST_UPDATED_DAY.S",
                      }#if($foreach.hasNext),#end

                  #end
                    ]
                  }

components:
  schemas:
    Users:
      type: object
      properties:
        count:
            type: integer
        error:
          type: string
          description: Error message if not empty - rest of the fields are zeros
        items:
            type: array
            items:
              $ref: '#/components/schemas/User'

    User:
      type: object
      required:
        - USER_ID
        - EMAIL
        - STATUS_CODE
        - STATUS_DESC
        - ACCOUNT_CREATED_DATE
      properties:
        USER_ID:
          type: string
          format: string
          example: ABDOUL9092
        EMAIL:
          type: string
          example: abdoul9092@company.com
        NAME_PREFFIX:
          type: string
          example: Dr
        FIRST_NAME:
          type: string
          example: Luis
        MI_NAME:
          type: string
          example: Simon
        LAST_NAME:
          type: string
          example: Abdou
        NAME_SUFFIX:
          type: string
          example: Jr
        STATUS_CODE:
          type: integer
          example: 1
        STATUS_DESC:
          type: string
          example: Active
        ACCOUNT_CREATED_DATE:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        ACCOUNT_UPDATED_DATE:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        ORG_ID:
          type: integer
          example: 846901
        ORG_NAME:
          type: string
          example: ALABAMA STATE UNIVERSITY
