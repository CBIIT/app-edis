AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Serverless Express User Info REST APIs powered by API Gateway and Lambda
Parameters:
  Environment:
    Description: Environment tier
    Type: String
    AllowedValues:
      - dev
      - test
      - qa
      - stage
      - prod
  LambdaRoleArn:
    Description: ARN of lambda function role user api web service
    Type: String
  DynamoDbRoleArn:
    Description: ARN of Api Gateway permission to access DynamoDB role.  Used in swagger file
    Type: String
  S3bucket:
    Description: S3 bucket for Lambda Auth and UserApi code
    Type: String
  Issuer:
    Description: Okta Authentication Server URL
    Type: String
  Audience:
    Description: Okta Authentication audience
    Type: String
    Default: api://default
  UsersTableName:
    Description: Users table name
    Type: String

Resources:
  EraCommonsUserApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Description: !Sub ${Environment} - Enterprise Data & Integration Services Web Services
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ../aws-cf-scripts/swagger-userapi-v3.yaml
      Auth:
        DefaultAuthorizer: TokenAuthorizer
        Authorizers:
          TokenAuthorizer:
            FunctionArn: !GetAtt AuthFunction.Arn
        ResourcePolicy:
          CustomStatements:
            -
              Effect: "Allow"
              Principal: "*"
              Action: "execute-api:Invoke"
              Resource:
                - "execute-api:/*/*/*"
            -
              Effect: "Deny"
              Principal: "*"
              Action: "execute-api:Invoke"
              Resource:
                - "execute-api:/*/*/*"
              Condition:
                NotIpAddress:
                  aws:SourceIp:
                    - 128.231.0.0/16
                    - 156.40.216.3/32
      EndpointConfiguration:
        Type: REGIONAL
      CacheClusterEnabled: true
      CacheClusterSize: "1.6"
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          MetricsEnabled: true
          DataTraceEnabled: true
          LoggingLevel: INFO
          CachingEnabled: true
          CacheDataEncrypted: true
          CacheTtlInSeconds: 300
          
      TracingEnabled: true

  EraCommonsUserApiLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: >-
        Lambda function contains eRA Commons External Users Info REST APIs implementation.
      FunctionName: !Join
        - '-'
        - - lambda-edis-user-api
          - !Ref Environment
      CodeUri: ../lambda-userapi/lambda-userapi.zip
      Handler: src/lambda.handler
      Runtime: nodejs12.x
      MemorySize: 2048
      Timeout: 30
      Tracing: Active
      EventInvokeConfig:
        MaximumRetryAttempts: 0
      Environment:
        Variables:
          LOG_LEVEL: info
      Tags:
        app : userinfoapi
      Role: !Ref LambdaRoleArn
      Events:
        GetUsers:
          Type: Api
          Properties:
            RestApiId: !Ref EraCommonsUserApi
            Path: /eracommonsapi/v1/users
            Method: GET
        GetUserById:
          Type: Api
          Properties:
            RestApiId: !Ref EraCommonsUserApi
            Path: /eracommonsapi/v1/user/{userID}
            Method: GET
        GetUserByDate:
          Type: Api
          Properties:
            RestApiId: !Ref EraCommonsUserApi
            Path: /eracommonsapi/v1/users/date/{date}
            Method: GET

  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: >-
        Lambda function with basic authorization.
      FunctionName: !Join
        - '-'
        - - lambda-auth
          - !Ref Environment
      CodeUri: ../lambda-auth/lambda-auth.zip
      Handler: src/lambda.handler
      Runtime: nodejs12.x
      MemorySize: 2048
      Timeout: 30
      Tracing: Active
      EventInvokeConfig:
        MaximumRetryAttempts: 0
      Environment:
        Variables:
          LOG_LEVEL: info
          AUDIENCE: !Ref Audience
          ISSUER: !Ref Issuer
      Tags:
        app : userinfoapi
      Role: !Ref LambdaRoleArn

  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn: EraCommonsUserApi
    Properties:
      Name: !Sub CBIIT-SN-apiGatewayPoC1-${Environment}
      Description: "Api Key for Service Now Client"
      Enabled: true
      StageKeys:
        - RestApiId: !Ref EraCommonsUserApi
          StageName: !Ref EraCommonsUserApiStage
      Value: !Sub CBIIT-SN-apiGatewayPoC1-${Environment}

  ApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
      - EraCommonsUserApi
      - ApiKey
    Properties:
      ApiStages:
        - ApiId: !Ref EraCommonsUserApi
          Stage: !Ref EraCommonsUserApiStage
      Description: Api Usage Plan for Service Now Client
      UsagePlanName: !Sub CBIIT-SN-apiGatewayPoC1-usage-plan-${Environment}

  ApiUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    DependsOn:
      - EraCommonsUserApi
      - ApiKey
      - ApiUsagePlan
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan


Outputs:
  LambdaFunctionConsoleUrl:
    Description: Console URL for the Lambda Function.
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${EraCommonsUserApiLambdaFunction}

  ApiGatewayApiConsoleUrl:
    Description: Console URL for the API Gateway API's Stage.
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/apigateway/home?region=${AWS::Region}#/apis/${EraCommonsUserApi}/stages/${Environment}

  ApiUrl:
    Description: Invoke URL for your API. Clicking this link will perform a GET request
      on the root resource of your API.
    Value: !Sub https://${EraCommonsUserApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/

  LambdaFunctionName:
    Description: Name of the Serverless Express Lambda Function
    Value: !Ref EraCommonsUserApiLambdaFunction

  ApiHostName:
    Description: Host name with root folder to create URL for your API.
    Value: !Sub ${EraCommonsUserApi}.execute-api.${AWS::Region}.amazonaws.com
