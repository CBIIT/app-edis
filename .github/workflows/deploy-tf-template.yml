# This is a basic workflow to help you get started with Actions

name: _deploy-tf-template

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_call: 
    inputs:
      envt:
        description: 'Environment'
        required: true
        type: string
        default: dev
      tier:
        description: 'Deployment tier'
        required: true
        type: string
        default: dev2
      s3bucket:
        description: 'S3 bucket to use for deployment'
        required: true
        type: string
        default: cf-templates-woyzwinjenjf-us-east-1
      subnet1:
        description: 'VPC Subnet 1 id'
        required: true
        type: string
      subnet2:
        description: 'VPC Subnet 2 id'
        required: true
        type: string
      vpcsg:
        description: 'VPC Security Group id'
        required: true
        type: string
      build-eracommons:
        description: 'Set to true to deploy era commons API related resources'
        required: true
        type: boolean
        default: false
      build-userinfo:
        description: 'Set to true to deploy era commons API related resources'
        required: true
        type: boolean
        default: false

jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    environment: ${{ inputs.envt }}

    permissions:
      packages: write
      id-token: write
      contents: write

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Repository Checkout
        uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Workflow Parameters
        run: |
          echo Environment - ${{ inputs.envt }}
          echo Deployment Tier - ${{ inputs.tier }}
          echo S3 Bucket - ${{ inputs.s3bucket }}
          echo Subnet 1 - ${{ inputs.subnet1 }}
          echo Subnet 2 - ${{ inputs.subnet2 }}
          echo Security Group - ${{ inputs.vpcsg }}
          echo Secret - ${{ secrets.AWS_OIDC_PROVIDER_ROLE }}
          echo Build eraCommons project - ${{ inputs.build-eracommons }}
          echo Build userInfoApi project - ${{ inputs.build-userinfo }}
      
      - name: build lambda Oracle db layer
        if: (inputs.build-eracommons == false) && (inputs.build-userinfo == false)
        working-directory: lambda-eracommons
        run: |
          npm run layer
          npm run layerzip
        
      - name: Setup AWS configuration
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_PROVIDER_ROLE }}
          role-session-name: TestSessionWithOIDC
          aws-region: us-east-1

      - name: Install Terraform
        id: install
        uses: hashicorp/setup-terraform@v2
        with: 
          terraform_wrapper: false

      - name: Init Terraform for both eRAcommons and UserInfo 
        id: initBoth
        run: terraform init -backend-config="bucket=${{ inputs.s3bucket }}" -backend-config="key=api-edis-tf-state/api-edis-all-${{ inputs.tier }}" -backend-config="region=us-east-1"
        working-directory: tf/
        if: ${{ inputs.build-eracommons && inputs.build-userinfo }}

      - name: Init Terraform for eRAcommons 
        id: initEraCommons
        run: terraform init -backend-config="bucket=${{ inputs.s3bucket }}" -backend-config="key=api-edis-tf-state/api-edis-eracommons-${{ inputs.tier }}" -backend-config="region=us-east-1"
        working-directory: tf/
        if: ${{ inputs.build-eracommons && !inputs.build-userinfo }}

      - name: Init Terraform for UserInfo 
        id: initUserInfo
        run: terraform init -backend-config="bucket=${{ inputs.s3bucket }}" -backend-config="key=api-edis-tf-state/api-edis-userinfo-${{ inputs.tier }}" -backend-config="region=us-east-1"
        working-directory: tf/
        if: ${{ inputs.build-userinfo && !inputs.build-eracommons }} 

      - name: Init Terraform for account wide
        id: initAccountWide
        run: terraform init -backend-config="bucket=${{ inputs.s3bucket }}" -backend-config="key=api-edis-tf-state/api-edis-${{ inputs.tier }}" -backend-config="region=us-east-1"
        working-directory: tf/
        if: ${{ !inputs.build-userinfo && !inputs.build-eracommons }}

      - name: Validate Terraform
        id: validate
        run: terraform validate
        working-directory: tf/

      - name: Planning Terraform
        id: plan
        run: terraform plan -var 'env=${{ inputs.tier }}' -var 'policy-boundary-arn=arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:policy/PermissionBoundary_PowerUser' -var 'subnet1=${{ inputs.subnet1 }}' -var 'subnet2=${{ inputs.subnet2 }}' -var 'vpcsg=${{ inputs.vpcsg }}' -var 'build-eracommons=${{ inputs.build-eracommons }}' -var 'build-userinfo=${{ inputs.build-userinfo }}' -var 's3bucket-for-vds-users=${{ inputs.s3bucket }}'
        working-directory: tf/

      - name: Terraform Deployment
        id: apply
        run: terraform apply -auto-approve -input=false -lock=false -var 'env=${{ inputs.tier }}' -var 'policy-boundary-arn=arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:policy/PermissionBoundary_PowerUser' -var 'subnet1=${{ inputs.subnet1 }}' -var 'subnet2=${{ inputs.subnet2 }}' -var 'vpcsg=${{ inputs.vpcsg }}' -var 'build-eracommons=${{ inputs.build-eracommons }}' -var 'build-userinfo=${{ inputs.build-userinfo }}' -var 's3bucket-for-vds-users=${{ inputs.s3bucket }}'
        working-directory: tf/
