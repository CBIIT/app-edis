# This is a basic workflow to help you get started with Actions

name: Terraform - Quality Check

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      envt:
        description: 'Environment'
        required: true
        default: dev
      tier:
        description: 'Deployment tier'
        required: true
        default: dev2
      s3bucket:
        description: 'S3 bucket to use for deployment'
        required: true
        default: cf-templates-woyzwinjenjf-us-east-1


jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    environment: ${{ github.event.inputs.envt }}

    permissions:
      packages: write
      id-token: write
      contents: write

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Repository Checkout
        uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Workflow Parameters
        run: |
          echo Environment - ${{ github.event.inputs.envt }}
          echo Deployment Tier - ${{ github.event.inputs.tier }}
          echo S3 Bucket - ${{ github.event.inputs.s3bucket }}
          echo Secret - ${{ secrets.AWS_OIDC_PROVIDER_ROLE }}
      
      - name: Check the existence of artifact
        run: |
          ls -la lambda-zip/lambda-userapi

      - name: Setup AWS configuration
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_PROVIDER_ROLE }}
          role-session-name: TestSessionWithOIDC
          aws-region: us-east-1

      - name: Test AWS Configuration
        run: |
          aws cloudformation describe-stacks | grep StackName
      
      - name: Install Terraform
        id: install
        uses: hashicorp/setup-terraform@v2
        with: 
          terraform_wrapper: false

      - name: Init Terraform
        id: init
        run: terraform init
        working-directory: tf/

      - name: Validate Terraform
        id: validate
        run: terraform validate
        working-directory: tf/

      - name: Planning Terraform
        id: plan
        run: terraform plan -var 'env=${{ github.event.inputs.tier }}' -var 'subnet1="subnet1"' -var 'subnet2="subnet2"' -var 'vpcsg="vpcng"' -var 'policy-boundary-arn=arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:policy/PermissionBoundary_PowerUser' -var 'build-eracommons=true' -var 'build-userinfo=true' -var 's3bucket-for-vds-users="s3bucket"' -input=false -no-color -out tfplan.binary
        working-directory: tf/

      - name: Show Terraform
        id: show
        run: terraform show -json tfplan.binary > plan.json
        working-directory: tf/

      - name: Run Checkov Scan
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: tf/
          quiet: true
          soft_fail: false
          framework: terraform
          output_format: sarif
          download_external_modules: true
          log_level: WARNING
          container_user: 1000
        continue-on-error: true

      - name: Checkov Create Artifact
        uses: actions/upload-artifact@master
        with:
          name: Checkov Scan Results
          path: ./results.sarif

      - name: TerraDocs Execute
        uses: terraform-docs/gh-actions@v1.0.0
        with:
          working-dir: tf,tf/modules/api-gateway,tf/modules/ddb-extusers,tf/modules/lambda
          output-file: README.md
          output-method: inject
          git-push: "true"  